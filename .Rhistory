dim(count_ma)
dim(count_ma)
dim(count_ma)[1]
dim(count_ma)[0]
head(count_ma)
View(count_ma)
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
count_ma = ts(train.df$Volume.KRW, frequency = 365*24, start = c(2017,7))
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
library(ggplot2)
library(tseries)
library(forecast)
library(dplyr)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600); #86400 is num of seconds in a day
#the following code I'm trying to run inside a loop...
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
#now I want do do some processing on my_subset...
}
library(ggplot2)
library(tseries)
library(forecast)
library(dplyr)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600); #86400 is num of seconds in a day
#the following code I'm trying to run inside a loop...
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
#now I want do do some processing on my_subset...
}
library(ggplot2)
library(tseries)
library(forecast)
library(dplyr)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
library(ggplot2)
library(tseries)
library(forecast)
library(dplyr)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
View(bitcoin.df)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
1");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDat
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-31");
all_dates = seq(startDate, endDate, 3600);
View(all_dates)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-12-30");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
View(train.df)
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-07-30");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
View(train.df)
# 2019년 데이터는 1월 데이터 일부가 누락되어 있기 때문에
# 2019년 2월 부터 시작한다.
startDate = as.POSIXct("2018-08-01");
endDate = as.POSIXct("2019-04-15");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
valid.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# Creating Time series model
library(forecast)
bitcoin.ts <- ts(bitcoin.df$Volume.KRW, start = c(2017,7), end = c(2018,1), frequency = 4320)
plot(bitcoin.ts, xlab = "Hour", ylab = "bitcoin Volume.KRW", ylim = c(0, 5e+10))
# Create Linear model
bitcoin.lm <- tslm(bitcoin.ts ~ trend + I(trend^2), lambda = "auto")
lines(bitcoin.lm$fitted.values, lwd = 2, col = "red")
bitcoin.lm <- tslm(bitcoin.ts ~ trend + I(trend^3), lambda = "auto")
lines(bitcoin.lm$fitted.values, lwd = 2, col = "blue")
bitcoin.lm <- tslm(bitcoin.ts ~ trend + I(trend^5), lambda = "auto")
lines(bitcoin.lm$fitted.values, lwd = 2, col = "green")
bitcoin.lm <- tslm(bitcoin.ts ~ trend + I(trend^10), lambda = "auto")
lines(bitcoin.lm$fitted.values, lwd = 2)
summary(bitcoin.lm)
count_ma = ts(train.df$Volume.KRW, frequency = 365*24, start = c(2017,7))
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
count_ma = ts(train.df$Volume.KRW, frequency = 365*24, start = c(2017,07))
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
pg(arima)
ggplot(train.df, aes(train.df$Date, train.df$Volume.KRW) + geom_point() + scale_x_date('hour'))
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
source('~/RStudioProjects/TermProject/code.R', echo=TRUE)
ggplot(train.df, aes(train.df$Date, train.df$Volume.KRW) + geom_point() + scale_x_date('hour'))
ggplot(train.df, aes(train.df$Date, train.df$Volume.KRW)) + geom_point() + scale_x_date('hour')
ggplot(train.df, aes(train.df$Date, train.df$Volume.KRW)) + geom_point() + scale_x_date('month')
ggplot(train.df, aes(train.df, train.df$Volume.KRW)) + geom_point() + scale_x_date('month')
ggplot(train.df, aes(Date, Volume.KRW)) + geom_point() + scale_x_date('month')
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2018-07-30");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# 2019년 데이터는 1월 데이터 일부가 누락되어 있기 때문에
# 2019년 2월 부터 시작한다.
startDate = as.POSIXct("2018-08-01");
endDate = as.POSIXct("2019-04-15");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
valid.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# using ARIMA
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
count_ma = ts(train.df$Volume.KRW, frequency = 365*24, start = c(2017,07))
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
count_ma = ts(train.df$Volume.KRW, frequency = 365*24, start = c(2017,07), end = c(2018,07))
arima = auto.arima(count_ma)
arima <- forecast(arima, h = 365*24)
accuracy(arima)
plot(arima) + abline(h=20)
install.packages('forecast', dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
detach(forecast)
detach("forecast")
detach("package:forecast", unload = TRUE)
detach_package("forecast", TRUE)
install.packages('forecast', dependencies = TRUE)
install.packages("forecast", dependencies = TRUE)
install.packages("forecast")
install.packages("forecast")
library(ggplot2)
library(tseries)
library(forecast)
library(forecast)
library(ggplot2)
library(tseries)
library(forecast)
library(dplyr)
# data preprocessing
bitcoin.df <- read.csv("Bitcoin_Hourly.csv")
bitcoin.df <- na.omit(bitcoin.df)
bitcoin.df <- bitcoin.df[,-2]
bitcoin.df$Date = as.POSIXct(bitcoin.df$Date, format = "%Y-%m-%d %I-%p")
bitcoin.df <- bitcoin.df[ order(bitcoin.df$Date, decreasing = FALSE), ]
bitcoin.df <- filter(bitcoin.df, bitcoin.df$Volume.KRW > 0)
# data partitioning - training data
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2017-07-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# 2019년 데이터는 1월 데이터 일부가 누락되어 있기 때문에
# 2019년 2월 부터 시작한다.
# data partitioning - validation data
startDate = as.POSIXct("2018-08-01");
endDate = as.POSIXct("2018-08-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
valid.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# apply log2 to our target value
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
valid.df$Volume.KRW <- log2(valid.df$Volume.KRW)
# second model - time series ARIMA model
# using ARIMA
count_ma = ts(train.df$Volume.KRW, frequency = 365)
arima = auto.arima(count_ma, D=1)
result <- forecast(arima, h = 365)
accuracy(result)
library(zoom)
plot(result) + abline(h=20)
plot(result) + abline(h=20)
# second model - time series ARIMA model
# using ARIMA
count_ma = ts(train.df$Volume.KRW, frequency = 365 * 24)
arima = auto.arima(count_ma, D=1)
# second model - time series ARIMA model
# using ARIMA
count_ma = ts(train.df$Volume.KRW, frequency = 365 * 24)
arima = auto.arima(count_ma, D=1)
# second model - time series ARIMA model
# using ARIMA
count_ma = ts(train.df$Volume.KRW, frequency = 365)
arima = auto.arima(count_ma, D=1)
result <- forecast(arima, h = 365)
accuracy(result)
plot(result) + abline(h=20)
plot(result)
plot(result)
plot(ts(train.df))
plot(stl(train.df, s.window="periodic"))
train.ts <- ts(train.df)
plot(stl(train.ts, s.window="periodic"))
train.ts <- ts(train.df)
plot(stl(train.ts, s.window="periodic"))
adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
train.ts <- ts(train.df)
plot(stl(train.ts, s.window="periodic"))
train.ts <- ts(train.df$Volume.KRW)
plot(stl(train.ts, s.window="periodic"))
adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
train.ts <- ts(train.df$Volume.KRW, frequency = 24)
plot(stl(train.ts, s.window="periodic"))
adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
arima = auto.arima(train.ts, D=1)
result <- forecast(arima, h = 24)
accuracy(result)
plot(result)
result <- forecast(arima, h = 365)
accuracy(result)
plot(result)
Dim(train.df)
dim(train.df)
train.ts <- ts(train.df$Volume.KRW, frequency = 24)
plot(stl(train.ts, s.window="periodic"))
arima = auto.arima(train.ts, seasonal = TRUE, D=30)
arima = auto.arima(train.ts, seasonal = TRUE, D=1)
result <- forecast(arima, h = 24)
accuracy(result)
plot(result)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(0), end = c(24))
plot(stl(train.ts, s.window="periodic"))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(07,01,0), end = c(07,30,24))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 8640, start = c(2017,7), end = c(2017,7))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 8640, start = c(2017,7), end = c(2017,8))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(2017,7), end = c(2017,8))
plot(train.ts)
# data partitioning - training data
startDate = as.POSIXct("2017-07-01");
endDate = as.POSIXct("2017-08-01");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
train.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# apply log2 to our target value
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(2017,7), end = c(2017,8))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(2017,7), end = c(2017,8))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(7,1), end = c(7,31))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 744, start = c(7,1), end = c(7,31))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24, start = c(7,1), end = c(7,31))
plot(train.ts)
train.ts <- ts(train.df$Volume.KRW, frequency = 24)
plot(train.ts)
# data partitioning - model process data
startDate = as.POSIXct("2019-02-01");
endDate = as.POSIXct("2019-04-01");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
model.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(train.ts)
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24, start=c(2019,2), end = c(2019,4))
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 1, start=c(2019,2), end = c(2019,4))
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24*31, start=c(2019,2), end = c(2019,4))
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24*31)
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24 * 31)
plot(model.ts)
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts)
plot(model.ts , xlab = "Day")
View(model.df)
# 2019.05.29 WED
# data partitioning - model process data
startDate = as.POSIXct("2019-02-01");
endDate = as.POSIXct("2019-03-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
model.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts , xlab = "Day")
dim(model.ts)
dim(model.df)
# plot(stl(train.ts, s.window="periodic"))
# adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
arima = auto.arima(model.ts, D=1)
result <- forecast(arima, h = 24)
accuracy(result)
plot(result)
# data partitioning - validation data
startDate = as.POSIXct("2019-04-01");
endDate = as.POSIXct("2019-04-16");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
valid.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# apply log2 to our target value
train.df$Volume.KRW <- log2(train.df$Volume.KRW)
valid.df$Volume.KRW <- log2(valid.df$Volume.KRW)
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts , xlab = "Day")
# plot(stl(train.ts, s.window="periodic"))
# adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
arima = auto.arima(model.ts, D=1)
result <- forecast(arima, h = 24)
accuracy(result)
# data partitioning - model process data
startDate = as.POSIXct("2019-02-01");
endDate = as.POSIXct("2019-03-31");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
model.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# data partitioning - validation data
startDate = as.POSIXct("2019-04-01");
endDate = as.POSIXct("2019-04-16");
all_dates = seq(startDate, endDate, 3600);
for (j in 1:length(all_dates)) {
filterdate = all_dates[j];
valid.df = subset(bitcoin.df, bitcoin.df$Date %in% all_dates)
}
# apply log2 to our target value
model.df$Volume.KRW <- log2(model.df$Volume.KRW)
valid.df$Volume.KRW <- log2(valid.df$Volume.KRW)
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts , xlab = "Day")
# plot(stl(train.ts, s.window="periodic"))
# adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
arima = auto.arima(model.ts, D=1)
result <- forecast(arima, h = 24)
accuracy(result)
plot(result)
valid.ts <- ts(valid.df$Volume.KRW, frequency = 24)
line(valid.ts)
lines(valid.ts)
plot(result)
lines(valid.ts)
plot(result)
pred_model <- predict(result)
pred_model <- predict(arima)
dim(arima)
dim(result)
result
View(result)
View(result)
dim(model.df)
result <- forecast(arima, h = 1)
result
accuracy(result, valid.df[0,]$Volume.KRW)
accuracy(result, predict(valid.df[0,]$Volume.KRW))
accuracy(pred_model, valid.df[0,]$Volume.KRW)
# plot(stl(train.ts, s.window="periodic"))
# adf.test(diff(log(train.ts)), alternative = "stationary", k=0)
arima = auto.arima(model.ts, D=1)
pred_model <- predict(arima)
accuracy(pred_model, model.df$Volume.KRW)
accuracy(arima, model.df$Volume.KRW)
accuracy(result, model.df$Volume.KRW)
result <- forecast(arima, h = 1)
accuracy(result, model.df$Volume.KRW)
result <- forecast(arima)
accuracy(result, model.df$Volume.KRW)
accuracy(result, model.df$Volume.KRW)
result <- forecast(arima, h=24)
accuracy(result, model.df$Volume.KRW)
result <- forecast(arima, h=365)
accuracy(result, model.df$Volume.KRW)
model.ts <- ts(model.df$Volume.KRW, frequency = 365)
plot(model.ts , xlab = "Day")
model.ts <- ts(model.df$Volume.KRW, frequency = 24)
plot(model.ts , xlab = "Day")
result <- forecast(arima, h=365)
plot(result)
result <- forecast(arima, h=24)
plot(result)
predict(arima, model.df$Volume.KRW)
